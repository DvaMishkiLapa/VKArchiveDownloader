import asyncio
import os
from typing import Coroutine, Dict

import aiofiles
import aiohttp

import tools
from logger import create_logger

logger = create_logger('logs/vk_parser.log', 'data_downloader', 'DEBUG')


async def downloader(response: aiohttp.ClientResponse, path: str, name: str) -> Coroutine:
    '''
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ `response`:
    `response`: –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
    `path`: –ø—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª
    `name`: –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    '''
    async with aiofiles.open(os.path.join(path, name), 'wb') as f:
        async for data in response.content.iter_any():
            await f.write(data)


async def get_info(url: str, save_path: str, file_name: str, sema: asyncio.BoundedSemaphore) -> Dict[str, str] | None:
    '''
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ `response`, –≤–æ–∑–≤—Ä–∞—â–∞—è –æ –Ω–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
    ```
    {
        'url': URL —Å–∫–∞—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞,
        'file_info': –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
    }
    ```

    `url`: —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Ä–µ—Å—É—Ä—Å
    `save_path`: –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª
    `file_name`: –∏–º—è —Ñ–∞–π–ª–∞
    '''
    try:
        async with sema, aiohttp.ClientSession() as session:
            async with session.get(url, timeout=5) as response:
                assert response.status == 200, f'Response status: {response.status}'
                file_info = response.headers['content-type'].split(';')[0]
                file_type = file_info.split('/')[-1]
                if any(t in response.headers['content-type'] for t in ('image', 'audio')):
                    download_path = os.path.join(save_path, file_type)
                    tools.create_folder(os.path.join(download_path))
                    await asyncio.create_task(
                        downloader(
                            response=response,
                            path=download_path,
                            name=f'{file_name}.{file_type}'
                        )
                    )
                return {'url': response.url, 'file_info': file_info}
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ üîó {url}: {e}')
        return {'url': url, 'file_info': 'error'}
