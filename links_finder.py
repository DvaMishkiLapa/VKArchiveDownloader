import configparser
from concurrent.futures import ProcessPoolExecutor
from itertools import chain
from os import cpu_count, listdir
from os.path import isdir, isfile, join, split, splitext
from typing import Any, Callable, Dict, List, Tuple

from bs4 import BeautifulSoup

from logger import create_logger

config = configparser.ConfigParser()
config_read = config.read('config.ini', encoding='utf8')
if config_read is None:
    logger = create_logger('logs/vk_parser.log', 'links_finder', 'DEBUG')
else:
    log_level = config['main_parameters'].get('log_level', 'DEBUG')
    logger = create_logger('logs/vk_parser.log', 'links_finder', log_level)


class VKLinkFinder():
    def __init__(
        self,
        archive_path: str,
        folder_names: Dict[str, str],
        vk_url: str = 'https://vk.com/',
        vk_encoding: str = 'cp1251',
        core_count: int = 0
    ) -> None:
        '''
        –ü–∞—Ä—Å–µ—Ä –∞—Ä—Ö–∏–≤–∞ VKontakte.
        `archive_path`: –ü—É—Ç—å –¥–æ –∞—Ä—Ö–∏–≤–∞
        `folder_names` —Å–ª–æ–≤–∞—Ä—å –ø–∞–ø–æ–∫
        `vk_url`: —Å—Å—ã–ª–∫–∞ –Ω–∞ VK. –û–±—ã—á–Ω–æ, `https://vk.com/`
        `vk_encoding`: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ `.html` —Ñ–∞–π–ª–æ–≤ VK. –û–±—ã—á–Ω–æ, `cp1251`
        `core_count`: —á–∏—Å–ª–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–∫–∞—Ö –≤ –∞—Ä—Ö–∏–≤–µ
        ```
        {
            ...
            profile_id: {
                'name': '–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –±–µ—Å–µ–¥—ã'
                'dialog_link': '–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –±–µ—Å–µ–¥—É',
                'links': ['–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫']
            },
            ...
        }
        ```
        '''
        self.archive_path = archive_path
        self.vk_url = vk_url
        self.vk_encoding = vk_encoding
        self.folder_names = folder_names
        if core_count <= 0:
            self.core_count = cpu_count()
            if self.core_count is None:
                self.core_count = 1
                logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ üîó –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ')
            else:
                logger.info(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ üîó: {self.core_count}')
        else:
            self.core_count = core_count
            logger.info(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ üîó: {self.core_count}')

        self.link_info = self.__get_vk_attachments()

    @classmethod
    def get_messages_attachment(self, file_path: str, vk_encoding: str = 'cp1251') -> List[str] | None:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ `html` —Ñ–∞–π–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        `file_path`: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        `vk_encoding`: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ `.html` —Ñ–∞–π–ª–æ–≤ VK. –û–±—ã—á–Ω–æ, `cp1251`
        '''
        with open(file_path, encoding=vk_encoding) as f:
            try:
                soup = BeautifulSoup(f.read(), 'html.parser')
                link_tags = soup.find_all('a', class_='attachment__link', href=str)
                if link_tags:
                    return [tag['href'] for tag in link_tags]
                return ''
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.')
                return ''

    @classmethod
    def get_photos_attachment(self, file_path: str, vk_encoding: str = 'cp1251') -> List[str] | None:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ `html` —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        `file_path`: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        `vk_encoding`: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ `.html` —Ñ–∞–π–ª–æ–≤ VK. –û–±—ã—á–Ω–æ, `cp1251`
        '''
        with open(file_path, encoding=vk_encoding) as f:
            try:
                soup = BeautifulSoup(f.read(), 'html.parser')
                link_tags = soup.find_all('img', src=str)
                if link_tags:
                    result = []
                    for link in link_tags:
                        find_link = link['src']
                        if 'http' in find_link:
                            result.append(find_link)
                    return result
                return ''
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.')
                return ''

    @classmethod
    def get_likes_or_doc_attachment(self, file_path: str, vk_encoding: str = 'cp1251') -> List[str] | None:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ `html` —Ñ–∞–π–ª–∞ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        `file_path`: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        `vk_encoding`: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ `.html` —Ñ–∞–π–ª–æ–≤ VK. –û–±—ã—á–Ω–æ, `cp1251`
        '''
        with open(file_path, encoding=vk_encoding) as f:
            try:
                soup = BeautifulSoup(f.read(), 'html.parser')
                link_tags = soup.find_all('a', href=str)
                if link_tags:
                    result = []
                    for link in link_tags:
                        find_link = link['href']
                        if 'vk.com' in find_link:
                            result.append(find_link)
                    return result
                return ''
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.')
                return ''

    @classmethod
    def get_all_files_from_directory(self, path: str, ext: list) -> List[str]:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –¥–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ –ø–∞–ø–∫–µ
        `path`: –ø—É—Ç—å –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –ø–∞–ø–∫–∏
        `ext`: –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤)
        '''
        return [join(path, f) for f in listdir(path) if isfile(join(path, f)) and splitext(join(path, f))[1] in ext]

    @classmethod
    def walk_directory(self, dir_path: str, func_handler: Callable, core_count: int = 1) -> List[Any]:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏
        `dir_path`: –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏
        `func_handler`: —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏–∑ `dir_path`
        `core_count`: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤ `ProcessPoolExecutor`
        '''
        files = self.get_all_files_from_directory(dir_path, ['.html'])
        with ProcessPoolExecutor(core_count) as executor:
            result = list(set(chain(*executor.map(func_handler, files))))
        return result

    @classmethod
    def get_all_dirs_from_directory(self, path: str) -> List[str]:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–æ –≤—Å–µ—Ö –ø–∞–ø–æ–∫, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–µ
        `path`: –ø—É—Ç—å –¥–æ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–∏
        '''
        return [join(path, f) for f in listdir(path) if isdir(join(path, f))]

    @classmethod
    def hook_dialog_name(self, path: str, vk_encoding: str = 'cp1251') -> str | None:
        '''
        –ù–∞—Ö–æ–¥–∏—Ç –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –≤–µ–ª—Å—è –¥–∏–∞–ª–æ–≥ (–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞/–±–µ—Å–µ–¥—ã)
        –ï—Å–ª–∏ –∏–º—è –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–µ—Ç `None`
        `path`: –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        `vk_encoding`: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ `.html` —Ñ–∞–π–ª–æ–≤ VK. –û–±—ã—á–Ω–æ, `cp1251`
        '''
        with open(join(path, 'messages0.html'), 'r', encoding=vk_encoding) as f:
            html = f.read()
            soup = BeautifulSoup(html, 'html.parser')
            name = soup.find('div', class_='ui_crumb')
        return None if name is None else str(name.string)

    @classmethod
    def get_dialog_type(self, dialog_path: str) -> Tuple[str | int]:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞ –∏ –µ–≥–æ ID (–±–µ–∑ -, –µ—Å–ª–∏ –±—ã–ª):
        - `id`: –ª–∏—á–Ω–∞—è –±–µ—Å–µ–¥–∞
        - `public`: –æ–±—â–∞—è –±–µ—Å–µ–¥–∞
        `dialog_path`: –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        '''
        folder_name = split(dialog_path)[-1]
        dialog_type = 'public' if '-' in folder_name else 'id'
        dialog_id = folder_name.replace('-', '')
        return dialog_type, dialog_id

    def __get_vk_attachments(self) -> Dict[str, dict]:
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏—è –≤ VK –∞—Ä—Ö–∏–≤–µ
        `base_dir`: –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ VK –∞—Ä—Ö–∏–≤–∞
        '''
        result = {}

        all_find_links = 0

        mes_links = 0
        mes_folder = self.folder_names.get('messages', False)
        if mes_folder:
            result['messages'] = {}
            dirs = self.get_all_dirs_from_directory(join(self.archive_path, mes_folder))
            for path in dirs:
                logger.info(f'üìÅ: {path}')
                dialog_type, dialog_id = self.get_dialog_type(path)
                dialog_full_id = f'{dialog_type}{dialog_id}'
                dialog_name = self.hook_dialog_name(path, self.vk_encoding)
                find_links = self.walk_directory(path, self.get_messages_attachment, self.core_count)
                count_find_link = len(find_links)
                mes_links += count_find_link
                logger.info(f'=> –ò–º—è –¥–∏–∞–ª–æ–≥–∞: {dialog_name}')
                logger.info(f'=> üÜî –¥–∏–∞–ª–æ–≥–∞: {dialog_full_id}')
                logger.info(f'=> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö üîó: {count_find_link}')
                result['messages'][dialog_id] = {
                    'name': dialog_name,
                    'dialog_link': f'{self.vk_url}{dialog_full_id}',
                    'links': find_links
                }
            logger.info(f'üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö üîó –≤ {mes_folder}: {mes_links}')
            all_find_links += mes_links

        likes_photo_links = 0
        likes_photo_folder = self.folder_names.get('likes_photo', False)
        if likes_photo_folder:
            path = join(self.archive_path, likes_photo_folder)
            logger.info(f'üìÅ: {path}')
            find_links = self.walk_directory(path, self.get_likes_photo_attachment, self.core_count)
            count_find_link = len(find_links)
            likes_photo_links += count_find_link
            result['likes_photo'] = {
                'links': find_links
            }
            logger.info(f'üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö üîó –≤ {likes_photo_folder}: {likes_photo_links}')
            all_find_links += likes_photo_links

        profile_photos_links = 0
        profile_photo_folder = self.folder_names.get('photos', False)
        if profile_photo_folder:
            result['photos'] = {'links': []}
            dirs = self.get_all_dirs_from_directory(join(self.archive_path, profile_photo_folder))
            for path in dirs:
                logger.info(f'üìÅ: {path}')
                find_links = self.walk_directory(path, self.get_photos_attachment, self.core_count)
                count_find_link = len(find_links)
                profile_photos_links += count_find_link
                logger.info(f'=> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö üîó: {count_find_link}')
                result['photos']['links'].extend(find_links)
            logger.info(f'üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö üîó –≤ {profile_photo_folder}: {profile_photos_links}')
            all_find_links += profile_photos_links

        documents_links = 0
        documents_folder = self.folder_names.get('profile', False)
        if documents_folder:
            result['profile'] = {}
            dirs = self.get_all_dirs_from_directory(join(self.archive_path, documents_folder))
            path = join(self.archive_path, documents_folder)
            logger.info(f'üìÅ: {path}')
            find_links = self.walk_directory(path, self.get_likes_or_doc_attachment, self.core_count)
            count_find_link = len(find_links)
            documents_links += count_find_link
            result['profile'] = {
                'links': find_links
            }
            logger.info(f'üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö üîó –≤ {documents_folder}: {documents_links}')
            all_find_links += documents_links

        logger.info(f'üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö üîó: {all_find_links}')

        return result
