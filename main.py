import asyncio
import json
import os
import traceback
from datetime import datetime
from os.path import join
from shutil import rmtree
from typing import Coroutine, Dict, Generator

import aiofiles
import aiohttp

from archive_parser import VKArchiveParser
from logger import create_logger

logger = create_logger('logs/vk_parser.log', 'main', 'DEBUG')
archive_path = join('Archive', 'messages')
output_folder = 'output'
downloads_folder = 'downloads'


def clear_spec(dstr: str, charters: str = '\\/:*?"<>|') -> str:
    '''
    –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã `charters` –∏–∑ —Å—Ç—Ä–æ–∫–∏ `dstr`
    `dstr`: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è
    `charters`: —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ `dstr`
    '''
    for x in charters:
        dstr = dstr.replace(x, '')
    return dstr


def create_folder(path: str) -> None:
    '''
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –ø–æ –ø—É—Ç–∏ –∏–∑ `path`
    `path`: –ø—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫ –∏ –ø–æ–¥–ø–∞–ø–æ–∫
    '''
    if not os.path.exists(path):
        os.makedirs(path)


def listdir_nohidden(path: str) -> Generator:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –ø–æ –ø—É—Ç–∏ `path`
    `path`: –ø—É—Ç—å –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –ø–∞–ø–∫–∏
    '''
    for f in os.listdir(path):
        if not f.startswith('.'):
            yield f


def clear_folder(path: str) -> None:
    '''
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç–∏ –∏–∑ `path`
    `path`: –ø—É—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    '''
    for f in listdir_nohidden(path):
        rmtree(path, f)


def clear_jsons(path: str) -> None:
    '''
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ `JSON` —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç–∏ –∏–∑ `path`
    `path`: –ø—É—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    '''
    for f in listdir_nohidden(path):
        if 'json' in f:
            os.remove(join(path, f))


async def downloader(response: aiohttp.ClientResponse, path: str, name: str) -> Coroutine:
    '''
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ `response`:
    `response`: –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
    `path`: –ø—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª
    `name`: –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    '''
    async with aiofiles.open(os.path.join(path, name), 'wb') as f:
        async for data in response.content.iter_any():
            await f.write(data)


async def get_info(url: str, save_path: str, file_name: str) -> Dict[str, str] | None:
    '''
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ `response`, –≤–æ–∑–≤—Ä–∞—â–∞—è –æ –Ω–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
    ```
    {
        'url': URL —Å–∫–∞—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞,
        'file_info': –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
    }
    ```

    `url`: —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Ä–µ—Å—É—Ä—Å
    `save_path`: –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª
    `file_name`: –∏–º—è —Ñ–∞–π–ª–∞
    '''
    try:
        async with sema, aiohttp.ClientSession() as session:
            async with session.get(url, timeout=5) as response:
                assert response.status == 200
                file_info = response.headers['content-type'].split(';')[0]
                file_type = file_info.split('/')[-1]
                if any(t in response.headers['content-type'] for t in ('image', 'audio')):
                    download_path = os.path.join(save_path, file_type)
                    create_folder(os.path.join(download_path))
                    await asyncio.create_task(
                        downloader(
                            response=response,
                            path=download_path,
                            name=f'{file_name}.{file_type}'
                        )
                    )
                return {'url': response.url, 'file_info': file_info}
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ üîó {url}: {e}')
        return {'url': url, 'file_info': 'error'}


async def main():
    clear_folder(os.path.join(output_folder, downloads_folder))
    clear_jsons(output_folder)
    logger.info(f'üìÅ {output_folder} –æ—á–∏—â–µ–Ω–∞ üóëÔ∏è')

    logger.info('üî• –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—Ä—Ö–∏–≤–∞ VK... üî•')
    first_start = datetime.now()
    obj = VKArchiveParser(archive_path)
    logger.info(f'‚åõ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Å—ã–ª–∫–∞—Ö: {datetime.now() - first_start}')
    with open(os.path.join(output_folder, 'dirty_links.json'), 'w', encoding='utf8') as f:
        f.write(json.dumps(obj.link_info, indent=4, ensure_ascii=False))

    result = {}
    full_count = 0
    start = datetime.now()
    for key, value in obj.link_info.items():
        logger.debug(f'–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ üîó –¥–ª—è {key}, {value["name"]}')
        result[key] = {'name': value["name"], 'dialog_link': value['dialog_link']}
        dialog_name_id = f'{clear_spec(value["name"])}_{key}'
        path_for_create = os.path.join(output_folder, downloads_folder, dialog_name_id)
        create_folder(path_for_create)
        logger.debug(f'–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ {path_for_create}')
        tasks = [asyncio.ensure_future(get_info(v, path_for_create, value['links'].index(v))) for v in value['links']]
        count = len(tasks)
        full_count += count
        logger.debug(f'–ó–∞–¥–∞—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É üîó —Å–æ–∑–¥–∞–Ω—ã, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}')
        tasks_result = list(filter(None, await asyncio.gather(*tasks)))
        logger.debug(f'–ó–∞–¥–∞—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É üîó –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(tasks_result)}')
        for res in tasks_result:
            file_info = result[key].setdefault(res['file_info'], [])
            file_info.append(str(res['url']))
    full_end = datetime.now()

    logger.info(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö üîó: {full_count}')
    logger.info(f'‚åõ –æ–±—Ä–∞–±–æ—Ç–∫–∏ üîó –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö: {full_end - start}')
    with open(os.path.join(output_folder, 'links_info.json'), 'w', encoding='utf8') as f:
        f.write(json.dumps(result, indent=4, ensure_ascii=False))
    logger.info(f'–û–±—â–µ–µ ‚åõ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞ VK: {full_end - first_start}')


if __name__ == '__main__':
    try:
        sema = asyncio.BoundedSemaphore(100)
        if 'nt' in os.name:
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        asyncio.run(main())
    except Exception:
        logger.critical(traceback.format_exc())
